const DEFAULT_ROUNDING_PLACES = 6

let asset_1 = {"name": "AMD", "data": [47.46,46.75,50.11,48.11,48.59,43.27,45.38,45.7,39.01,43.9,38.71,41.88,39.12,39.82,39.61,41.64,46.22,44.63,47.5,46.58,47.86,45.48,43.66,44.49,42.59,47.52,47.56,48.79,48.38,50.94,54.93,54.99,56.95,56.6,56.97,52.92,55.92,55.9,56.18,56.49,55.51,53.66,52.39,49.88,52.56,52.19,52.16,51.95,53.19,55.74,53.76,52.18,54.51,54.2,54.59,55.47,56.39,54.65,55.17,53.19,52.74,51.74,53.8,53.63,53.54,52.73,52.63,53.1,52.97,56.39,57.44,52.83,53.5,54.68,54.46,54.55,54.04,54.23,54.76,53.99,52.39,51.93,50.1,50.28,52.61,52.58,52.34,53.4,52.93,53.43,57.26,55.88,53.59,54.72,55.34,54.92,55.04,57.46,57,61.79,59.57,69.4,68.97,67.61,76.09,78.2,77.43,77.67,85.04,85.31,86.71,84.85,82.24,76.88,82.61,81.84,81.3,82.42,81.66,81.09,82.77,83.81,83.08,86.35,86.02,83.8,85.55,90.82,92.18,90.22,82.54,82.01,78.69,81.91,78.98,76.34,77.9,78.93,76.66,76.55,74.93,77.94,77.7,74.73,75.82,78.06,79.48,81.77,81.99,84.86,81.8,86.15,84.48,86.69,86.51,83.1,84.29,85.28,84.21,83.13,83.17,82,81.56,79.2,79.42,81.96,82.23,78.88,76.4,78.02,75.29,74.7,76.58,81.35,83,85.88,83.12,77.99,81.28,81.84,81.43,83.73,83.36,82.54,85.54,84.64,85.31,85.07,86.71,87.19,92.66,92.63,93.74,92.31,94.04,94.07,92.92,89.83,91.66,91.65,94.78,97.12,96.85,96.84,95.92,93.23,93.16,91.55,91.81,91.6,90.62,92.29,91.71,92.3,92.77,90.33,95.16,94.58,97.25,95.36,91.78,90.79,88.21,89.45,88.75,91.53,92.79,94.13,94.71,88.84,87.52,85.64,87.66,88.86,87.89,87.84,87.9,91.47,90.91,92.35,92.66,93.77,91.46,89.94,88.64,89.58,85.37,84.74,86.94,82.42,84.51,86.39,84.13,80.86,77.75,78.52,73.96,78.53,77.52,81.23,81.05,82.5,82.75,82.63,78.12,79.06,80.3,78.38,76.48,76.22,77.41,77.14,76,78.5,81.09,81.43,81.44,82.2,83.35,82.76,78.58,80.19,78.55,83.01,82.15,81.11,79.27,81.61,79.06,82.76,85.41,85.21,84.02,83.91,81.62,78.55,78.61,77.83,77.89,78.81,75.99,76.83,74.64,73.09,74.59,74.65,74.44,76.23,78.06,77.17,77.44,77.86,78.34,78.42,80.08,80.81,81.97,80.28,81.58,81.35,80.89,79.96,81.56,81.31,81.55,80.47,80.11,84.56,84.65,82.59,83.58,83.82,86.1,85.62,87.08,89.52,93.93,93.31,94.7,94.47,90.54,89.74,90.9,90.81,90.26,89.05,86.93,85.89,86.58,87.11,89.41,91.21,92.15,91.82,91.03,97.93,102.95,106.19,108.63,112.56,118.77,112.35,110.11,107.58,106.48,107.68,106.5,110.55,107.48,107.56,103.44,103.7,104.65,108.77,107.65,108.3,107.27,111.4,111.32,110.72,109.99,109.2,109.92,109.15,106.17,106.15,105.2,104.8,105.73,105.6,106.22,103.88,101.55,102.82,104.38,106.15,105.8,108.16,101.52,100.35,102.9,102.45,100.34,101.81,103.64,106.45,105.06,104.68,105.04,109.16,111.99,112.12,116.43,116.33,116.39,119.33,119.82,122.36,122.93,122.28,121.16,120.23,125.23,127.63,130.53,137.5,136.34,150.16,148.92,139.87,146.01,147.89,146.49,152.45,151.34,155.02,155.41,152.52,149.92,157.8,154.81,161.91,158.37,149.11,150.68,144.01,139.06,144.85,145.24,138.1,138.55,133.8,135.6,146.5,138.64,137.75,135.8,144.25,143.88,146.14,154.36,153.15,148.26,145.15,143.9,150.24,144.42,136.15,136.23,132,132,137.31,137.47,132.74,136.88,131.93,128.27,121.89,118.81,116.53,111.13,110.71,102.6,105.24,114.25,116.78,122.76,120.08,123.6,123.67,128.23,132.85,125.77,113.18,114.27,121.47,117.69,112.37,113.83,115.65,109.76,116.61,121.06,123.34,113.83,118.28,111.98,108.41,102.95,105.53,111.05,106.46,104.29,102.25,109.33,115.37,111.69,113.46,115.92,114.78,113.92,120.53,119.67,120.24,123.23,119.22,109.34,108.19,110.53,106.82,103.67,103.72,101,97.37,95.1,97.74,93.06,93.89,96.93,94.02,89.85,88.14,90.69,85.16,84.91,89.64,85.52,89.84,91.13,99.42,93.87,95.34,86.36,88.73,87.92,87.06,95.12,94.24,102.47,96.28,96.67,93.5,95.07,91.16,92.65,98.75,102.26,101.86,101.22,108.59,106.3,105.65,105.28,101.9,98.8,94.82,86.99,86.99,89.3,82.05,81.57,83.79,83.75,82.43,87.08,86.16,80.78,77.99,76.47,73.67,75.2,75.35,79.3,79.35,76.95,76.36,77.52,78.6,81.11,81.43,85.88,89.43,91.09,88.1,87.54,85.25,89.82,91.67,94.47,96.78,99.29,98.09,103.91,102.31,100.07,95.54,99.05,98.12,100.83,101.01,100.2,98.27,100.44,95.95,92.84,92.49,92.73,97.18,91.18,88.49,86.94,84.87,82.33,80.24,78.72,79.61,82.78,85.45,84.64,77.03,77.45,76.66,76.51,76.77,75.25,74.48,69.5,67.96,66.3,67.17,68.36,64.14,63.36,66.11,67.9,67.94,67.85,58.44,57.81,57.63,57.85,58.94,55.94,57.96,57.92,57.23,57.77,58.82,58.7,61.47,59.73,58.6,62.01,60.06,59.66,58.63,60.11,62.19,63.08,63.85,59.92,68.47,72.37,73.53,76.37,72.7,73.9,73.57,72.46,75.25,76.4,75.14,73.19,73.39,77.63,77.48,74.98,73.62,70.27,70.14,70.47,68.59,70.67,71.65,68.93,66.53,65.41,64.59,65.05,67.68,63.86,64.52,63.27,62.57,64.82,64.77,64.02,64.66,62.33,63.96,67.24,68.05,69.06,70.8,71,71.59,70.53,67.71,70.07,76.53,74.7,74.91,75.16,75.4,72.45,75.15,84.64,88.31,86.09,83.68,85.91,84.69,83.21,81.48,83.13,85.95,85.18,80.08,78.5,76.77,76.61,79.75,78.09,78.77,78.58,78.29,80.44,81.52,81.16,82.11,85.37,84.03,82.67,82.01,87.45,89.68,96.6,97.84,96.81,95.93,97.58,100.28,97.95,96.61,94.56,96.09,97.88,98.01,96.56,95.87,92.56,92.47,95.48,94.03,92.33,92.09,91.75,89.87,89.78,89.94,90.11,88.43,87.57,83.8,85.94,87.44,89.37,89.69,89.91,81.62,86.61,89.84,95.04,95.06,97.02,97.1,95.26,97.4,101.48,103.75,107.93,105.82,108,108.12,108.27,120.35,127.03,125.27,118.21,119.47,117.86,117.93,124.23,117.83,121.05,124.92,129.19,124.53,127.33,124.24,120.08,118.93,112.11,110.7,110.01,107.51,110.39,110.17,111.24,113.91,115.82,113.95,113.48,113.17,113.58,111.32,114.58,115.92,115.94,118.32,117.93,116.43,110.25,110.95,110.61,113,110.09,111.1,112.96,114.4,117.6,109.35,113.15,115.82,116.81,113.23,110.47,110.23,107.57,111.98,111.35,107.19,104.44,105.45,108.22,105.66,109.43,101.8,102.25,102.61,105.92,106.59,105.72,109.45,110.78,109.28,106.59,106.09,105.32,105.31,107.71,106.63,101.49,102.37,101.61,100.34,96.11,96.2,97.38,95.96,98.07,102.76,102.82,103.27,100.08,104.07,102.91,107.24,106.97,109.01,108.31,108.79,105.09,106.46,105.14,102.17,102.4,101.81,100.01,101.67,96.06,93.67,96.43,96.18,98.5,108.04,107.83,112.25,111.75,113.45,113.59,113.49,118.59,116.79,119.88,118,119.83,120.62,121.53,119.16,122.51,122.31,122.65,122.01,123.85,121.16,121.39,118.57,118.38,116.82,128.37,128.92,134.41,137.61,138.19,138,139.15,138.9,140.15,135.47,139.91,139.6,143.41,146.07,148.76,147.41,138.58,135.32,136.01,138.58,146.18,149.26,148.54,148.02,146.56,158.74,160.17,162.67,174.23,168.18,168.42,178.29,180.33,177.25,177.83,172.06,167.69,170.48,177.66,174.23,167.88,170.94,169.35,172.48,171.91,171.54,178.7,176.76,173.87,165.69,164.29,181.86,176.52,176.01,178,176.54,192.53,202.64,205.36,205.13,210.63,211.38,207.39,198.39,202.76,194.79,187.06,191.06,190.65,181.42,179.73,178.68,179.65,178.63,177.87,179.59,180.49,183.34,178.7,180.77,165.83,170.42,169.9,170.78,167.14,170.5,163.28,160.32,163.46,154.02,155.08,146.64,148.64,152.27,151.74,153.76,157.4,160.2,158.38,144.27,146.16,150.6,155.78,154.43,153.62,152.39,151.92,150.56,153.16,159.67,162.62,164.47,166.33,164.66,165.52,160.43,166.36,171.61,165.14,166.75,166.9,163.55,159.99,166.17,166.78,167.87,160.34,158.96,160.24,159.9,159.63,158.4,154.63,161.78,161.23,160.25,160.25,157.54,159.47,162.21,157.69,164.31,163.9,171.9,178.69,177.1,183.96,181.94,181.61,179.83,177.55,159.43,155.77,151.58,155.87,154,144.63,138.32,139.99,139.75,138.44,144.48,132.54,132.5,134.82,130.18,128.67,136.32,134.27,136.77,141.13,140.75,147.36,148.56,155.28,156.4,157.81,151.7,154.98,149.99,150.5,146.36,145.49,148.56,136.94,140.87,139.44,134.35,138.15,142.84,149.86,150.77,152.31,152.08,150.82,148.29,156.74,155.95,156.75,158.32,162.02,167.49,164.35,164.08,159.75,159.78,162.85,170.9,170.97,172.8,171.02,164.18,167.89,165.27,156.64,156.13,156.25,155.97,157.9,154.09,152.91,153.44,156.23,159.92,166.25,148.6,144.07,141.86,140.71,141.66,145.1,149.82,147.95,147.35,143.63,139.3,138.84,134.9,138.93,139.39,137.6,137.49,138.35,141.13,137.72,136.24,137.18,142.06,141.98,143.99,141.36,138.59,130.87,127.74,130.15,130.6,126.91,126.69,125.02,121.41,118.88,119.21,124.6,126.29,125.06,125.19,122.44,120.79,120.63,125.37,129.55,127.33,121.84,116.04,117.32,116.09,119.96,118.44,121.46,122.28,123.75,123.04,122.84,115.01,114.17,117.35,118.86,115.95,114.27,119.5,112.01,110.16,107.56,110.48,111.1,111.72,111.81,113.1,114.28,114.69,114.17,110.84,108.11,103.96,104.74,99.51,99.86]}
let asset_2 = {"name": "EA", "data": [106.89,106.7,111.83,110.21,107.67,100.93,103.38,101.18,93.35,97.06,88.67,95.41,90.21,90.06,86.94,95.47,94.3,89.64,99.2,95.37,97.69,100.17,97.53,102.29,102.83,106.51,106.32,106.8,105.8,109.3,112.03,113.51,118.1,115.15,115.41,113.27,114.57,114.46,116.31,116.02,111.35,112.78,114.26,113.27,116.83,119.61,115.32,116.8,116.62,117.37,116.37,116.9,117.12,118.13,117.12,118.54,119.55,117.36,119.82,116.64,117.38,121.35,122.88,122.78,122.36,117.93,117.18,118.32,119.51,121.07,124.81,122.42,121.97,126.52,125.73,128.11,129.35,130.19,129.72,130.6,130.87,130.74,130.93,130.69,132.05,135.22,133.84,134.27,134.78,135.61,138.8,140.81,135.31,138.53,138.43,138.05,138.31,141.53,139.34,138.3,135.36,135.24,136.16,134.78,135.93,138.59,141.62,142.36,146.32,146.18,146.95,143.99,140.7,135.7,139.9,141.77,140.43,140.45,142.58,141.86,143.48,141.21,142.33,142.21,143.63,141.77,140.87,139.47,138.29,139.56,132.82,130.13,124.3,128.7,127.26,126.02,126.18,128.33,126.74,125.26,125.9,128.29,131.02,128.42,129.32,131.19,132.28,130.02,130.41,132.78,129.07,130.72,124.84,125.01,125.99,127.45,130.88,132.94,132.75,131.34,131.92,129.87,127.36,127.65,126.92,126.77,126.68,126.62,125.6,123.9,119.83,119.81,120.74,125.31,128.33,119.19,116.97,118.93,119.78,119.32,120.8,118.6,118.52,116.84,120.14,121.87,121.86,120.25,121.51,124.17,127.75,127.24,129.54,128.38,128.69,130.84,132.15,133.17,134.68,135.8,137.54,140.66,141.6,139.85,142.61,141.01,139.43,141.51,141.81,140.72,140.7,142.05,143.6,139.51,141.32,136.8,140.74,141.86,141.22,139.06,136.34,138.94,139,141.43,145.6,145.97,146,146.3,146.3,146.23,143.01,143.2,145.87,148.97,140.82,138.63,141.22,142.46,146.11,144.61,147.33,147.74,145.78,145.83,147.41,145.95,142.26,141.17,137.68,135.24,133.97,137.27,136.82,133.05,131.29,132.6,127.21,130.93,130.12,131.34,130.49,130.89,131.74,130.6,128,128.4,131.41,133.05,129.8,130.03,132.85,134.97,134.43,135.37,137.96,141.54,141.28,142.01,141.55,140.46,141.45,142.11,141.61,142.77,141.05,139.63,140.86,141.04,141.26,143.14,143.79,143.46,143.99,146.34,142.08,141.18,137.06,137.86,141.34,142.42,140.65,141.36,139.67,139.13,138.62,137.53,138.06,138.88,141.81,140.17,142.09,143.26,143.99,142.93,142.93,143.62,141.4,141.99,145.21,145.72,145.5,145.82,145.66,146.39,148.55,144.8,142.6,141.93,141.12,140.96,140.86,138.62,138.65,138.59,142.98,144.1,143.83,142.14,143.41,143,142.95,140.45,140.99,141.39,143.25,143.12,142.66,143.1,141.24,141.07,140.72,142.29,144.99,145.25,141.93,143.56,143.38,143.96,144.11,139.8,139.91,136.87,136.34,136.16,137.03,138.3,138.99,138.68,140,141.04,139.99,140.6,140.17,142.82,142.57,141.86,141.47,142.94,143.29,145.21,146.43,145.4,146.6,145.22,144.1,142.31,145.13,144.68,145.37,137.04,135.96,133.88,130.09,126.76,126.4,127.89,129.9,131.98,133.77,137.94,142.25,143.59,143.16,144.09,134.07,137.59,139.99,139.47,136.67,136.44,135.71,134.75,134.71,136.75,139.2,140.63,141.07,142.19,142.4,140.37,140.23,140.25,141.77,140.17,139.5,142.48,139.57,138.16,139.79,139.28,144.45,145.44,141.28,139.56,138.14,137.33,132.39,126.28,128.41,126.65,125.97,124.88,124.22,120.23,122.59,125.27,126.31,126.15,126.37,125,125.64,126.77,126.85,128.9,129.39,127.52,129.92,132.17,131.47,132.54,133.04,133.47,133.14,134.46,131.9,134.95,135.76,133.8,129.69,131.78,128.9,130.8,132.5,130.84,130.44,133.91,136.91,138.88,139.01,135.2,131.01,129.98,131.06,131.92,132.66,129.94,137.17,137.29,137.71,136.4,134.37,135.79,134.98,134.1,133.4,134.5,133.29,130.4,129.33,127.09,126.72,127.5,128.71,130.09,128.15,129.26,127.84,126.49,126.26,122.67,125.52,123.68,122.33,119.13,120.8,123.8,125.18,126.28,125.56,127.93,124.64,125.57,127.32,128.04,128.83,127.68,126.51,125.23,128.02,125.86,124.85,123.4,123.48,122.58,123.57,123.62,122.6,122.16,124.04,123.31,123.74,128.09,128.15,124.63,121.22,123.41,118.05,120,122.51,123.72,119.61,115.29,112.04,111.6,120.49,120.95,124.94,127.39,128.47,128.97,130.02,130.76,133.77,136.68,137.35,138.68,138.53,138.65,139.53,141.5,141,140.35,140.97,139.22,135.81,133.44,128.76,127.37,129.26,127.98,128.54,130.39,129.03,128.96,130.2,125.6,122.88,122.83,121.65,122.73,124.75,124.35,125.6,125.63,123.84,121.98,121.68,122.29,123.16,123.62,126.75,127.59,130.21,130.16,129.92,130.75,132.18,133.18,131.23,130.87,128.89,133.28,133.24,132.56,131.05,129.28,131.16,129.68,131.37,131.6,135.11,133.17,132.47,130.48,128.12,126.73,125.61,127.61,132.17,129.6,126.47,126.87,127.68,125.33,124.73,125.55,127.14,128.93,130.85,127.59,126.92,124.41,121.74,122.93,120.54,117.49,117.42,115.64,114.82,115.14,118.35,117.47,115.71,119.86,123.2,122.67,123.66,122.31,120.68,119.25,118.88,121.22,120.37,121.03,123.37,123.84,123.55,124.99,125.67,127.74,127.25,127.7,128.24,125.96,126.27,128.66,126.62,129.76,132.42,129.1,126.29,130.3,131.23,129.56,128.78,129.34,128.65,130.08,127.86,129.52,130.96,129.5,128.35,127.59,130.78,131.62,132.28,130.42,127.41,126.01,126.11,124.71,125.6,125.68,124.66,121.73,121.74,120.79,120.42,122.5,121.42,121.51,120.82,119.54,122.19,122.18,122.8,125.01,124.68,123.89,124.17,124.02,126.11,126.42,125.46,123.7,123.71,123.72,125.99,127.41,127.49,127.56,129.14,128.87,128.99,128.68,116.76,115.99,113.92,112.19,114.18,112.7,111.79,111.8,113.2,112.25,113.34,111.72,112,112.02,111.74,110.72,109.77,111.09,110.94,110.41,112.29,113.15,113.19,112.14,112.28,110.46,109.19,110.07,111.48,111.38,113.53,113.35,113.52,114.94,113.16,116.04,119.03,118.64,118.02,119.19,119.1,120.45,121.35,125.24,126.15,125.16,125.62,125.68,126.13,128.28,127.87,128.08,129.04,128.18,128.8,129.11,129.48,129.5,125.12,126.51,127.28,127.42,126.16,125.07,124.01,125.42,125.76,125.41,124.74,125.32,125.47,124.84,125.12,124.92,126.21,125.66,125.12,125.29,125.4,125.4,126.8,126.48,128,127.69,127.67,127.02,127.14,126.24,127.11,125.94,125.76,127.32,127.9,128.99,128.66,126.41,124.57,125.45,125.25,126.67,131.38,130.66,130.45,129.7,130.87,129.89,130.7,129.2,130.54,137.33,135.47,136.71,137.34,138.25,138.87,136.84,137.13,137.06,137.76,139.57,138.83,137.51,137.85,136.35,136.12,126.31,123.83,122.59,124.05,122.61,121.92,122.27,122.2,122.77,121.42,120.68,118.76,118.36,118.6,119.53,121.32,119.91,119.69,120.52,120.96,120.55,119.98,120.54,121.5,120.9,120.94,121.75,122.53,121.42,121.68,123.04,120.46,120.6,121,120.45,118.8,119,119.71,118.36,117.97,119.18,120.4,120.15,119.55,120.72,120.79,122.96,124.59,128.08,129.69,131.57,131.29,131.14,131.03,130.26,128.23,127.44,126.34,127.66,125.72,123.64,122.63,121.31,123.79,123.78,128.28,129.59,129.27,129.73,130.74,131.3,132.78,132.68,134.44,134.43,133.4,133.7,135.45,136.06,136.12,136.6,137.12,136.38,137.31,138.01,137.76,137.82,137.42,137.14,135.55,137.14,138.56,140.33,142.35,140.85,138.83,138.09,138.55,136.59,137.88,137.67,137.29,136.71,136.76,136.81,135.78,135.71,135.97,135.61,136.46,137.72,137.63,137.74,137.92,137.15,136.62,138.03,137.72,137.57,139.17,137.86,138.94,139.42,138.58,137.55,137.58,137.92,136.64,134.94,135.26,136.75,138.85,140.61,137.55,139,143.08,144.05,142.28,141.04,141.17,143.52,142.59,142.58,139.5,140.08,139.48,140.79,138.81,136.28,135.52,135.4,135.15,136.73,136.02,136.96,135.03,134.27,132.48,132.96,132.32,132.48,131.7,130.52,130.9,131.87,132.67,133.34,132.15,132.52,129.56,130.29,130,130.69,129.3,129.18,127.89,127.05,126.55,126.31,125.63,127.27,127.12,127.14,128.14,127.31,127.9,127.9,126.82,128.18,128.5,129.56,130.56,130.24,125.24,127.12,127.14,126.58,126.59,127.62,129.16,127.75,128.3,128.85,135.14,134.4,135.06,132.05,131.97,131.23,132.88,132.99,136.5,137.96,137.4,136.82,136.21,136.69,135.63,135.87,135.98,137.53,138.13,137.85,139.06,141.23,140.63,140.57,139.52,139.33,137.32,138.88,138.67,138.26,139.65,140.58,144.09,145.3,145.68,145,146.67,147,146.52,140.2,143.25,141.99,141.18,141.8,145.18,147.85,149.12,150.94,148.4,148.83,145.5,145.73,144.41,147.02,146.6,145.91,146.9,146.46,147.04,148.36,149.67,149.05,149.75,147.13,147.62,148.56,149.21,149.32,150.25,151.82,146.23,147.08,145.91,144.01,144.3,143.8,143.7,144.75,145.83,146.52,142.59,140.45,140.74,139.55,141.07,141.64,141.48,143.61,144.65,143.44,142.25,143.2,140.69,142.7,142.9,143.33,143.74,141.97,143.24,144.17,146.42,145.04,144.2,144.35,145.71,145.72,144.86,145.03,145.2,144.18,145.62,149.14,150.85,151.26,152.89,155.5,157.96,160,157.91,159.39,162.87,162.72,164.12,161.36,164.01,166.13,166.71,167.97,166.67,164.14,165.02,163.1,163.67,165.96,167.7,167.42,165.62,167.01,165.61,165.3,163.92,162.59,157.62,156.4,154.79,149.92,147.89,147.8,147.3,149.18,149.07,148.12,146.54,146.3,145.9,146.29,145.25,144.67,144.2,140.85,141.96,141.75,142.13,141.4,142,143.28,142.35,118.58,116.56,117.91,116.53,117.1,118.68,122.91,122.91,121.25,130.47,132,128.6,132.09,133.35,131.17,129.82,129.4,128.35,129.34,129.99,130.95,134.05,131.73,131.19,130.46,129.12]}
let current_correl = 0;
let actual_correl = 0;

let graph_data = {
    "w1": [],
    "w2": [],
    "port-return": [],
    "port-std-dev": []
}

let corr_1_data = {
    "w1": [],
    "w2": [],
    "port-return": [],
    "port-std-dev": []
}

let corr_neg_1_data = {
    "w1": [],
    "w2": [],
    "port-return": [],
    "port-std-dev": []
}

let min_risk_port = {}

let current_data_length = asset_1["data"].length;
let current_data_enter_length = 0;

function calculate(reset=true) {
    // Ensure both assets have the same data length
    if (asset_1["data"].length != asset_2["data"].length || !asset_1["data"].length) {
        console.log("Error")
        return
    }

    let returns_asset_1 = find_return_array(asset_1["data"])
    let returns_asset_2 = find_return_array(asset_2["data"])

    let exp_return_1 = average(returns_asset_1)
    let exp_return_2 = average(returns_asset_2)

    let var_1 = variance(returns_asset_1)
    let var_2 = variance(returns_asset_2)

    let sqrt_1 = Math.sqrt(var_1)
    let sqrt_2 = Math.sqrt(var_2)

    actual_correl = correlation(returns_asset_1, returns_asset_2)

    if (reset) {
        current_correl = actual_correl
        populate_data_table()
    }

    graph_data = find_lines(exp_return_1, exp_return_2, sqrt_1, sqrt_2, current_correl)
    corr_1_data = find_lines(exp_return_1, exp_return_2, sqrt_1, sqrt_2, 1)
    corr_neg_1_data = find_lines(exp_return_1, exp_return_2, sqrt_1, sqrt_2, -1)

    find_min_risk_point()
    plot_graph()

    document.querySelector("#current-correl").value = parseFloat(format(current_correl))
}

function find_return_array(data) {
    let returns = []
    for (let i = 1; i < data.length; i++) {
        returns[i-1] = (data[i] - data[i - 1]) / data[i - 1]
    }

    return returns
}

function average(data) {
    let avg = 0;

    // Find mean
    for (let i = 0; i < data.length; i++) {
        avg += data[i]
    }

    return avg / data.length
}

function variance(data) {
    let data_mean = average(data)

    let variance = 0;
    for (let i = 0; i < data.length; i++) {
        variance += (data[i] - data_mean) ** 2
    }

    return variance / (data.length - 1)
}

function correlation(data1, data2) {
    if (data1.length != data2.length) {
        console.log("Unable to find correlation")
        return
    }

    let avg_1 = average(data1)
    let avg_2 = average(data2)

    let numerator = 0;
    let sum_dev_square_1 = 0;
    let sum_dev_square_2 = 0;

    for (let i = 0; i < data1.length; i++) {
        numerator += (data1[i] - avg_1) * (data2[i] - avg_2)
        sum_dev_square_1 += (data1[i] - avg_1) ** 2
        sum_dev_square_2 += (data2[i] - avg_2) ** 2
    }

    return numerator / Math.sqrt(sum_dev_square_1 * sum_dev_square_2)
}

function find_lines(exp_return_1, exp_return_2, sqrt_1, sqrt_2, correl) {
    let weight_2 = 0;
    let port_return = 0;
    let port_std_dev = 0;
    let line = {
        "w1": [],
        "w2": [],
        "port-return": [],
        "port-std-dev": []
    }

    for (let weight_1 = 0; weight_1 <= 100; weight_1++) {
        weight_2 = 100 - weight_1
        port_return = (weight_1 / 100) * exp_return_1 + (weight_2 / 100) * exp_return_2
        port_std_dev = Math.sqrt(((weight_1 / 100) ** 2) * (sqrt_1 ** 2) + ((weight_2 / 100) ** 2) * (sqrt_2 ** 2) + (2 * (weight_1 / 100) * (weight_2 / 100) * correl * sqrt_1 * sqrt_2))

        line["w1"].push(weight_1 / 100)
        line["w2"].push(weight_2 / 100)
        line["port-return"].push(port_return)
        line["port-std-dev"].push(port_std_dev)
    }

    return line
}

function find_min_risk_point() {
    // ... is the spread operator to spread the array
    let min_var_index = graph_data["port-std-dev"].indexOf(Math.min(...graph_data["port-std-dev"]))

    min_risk_port = {"w1": graph_data["w1"][min_var_index], "w2": graph_data["w2"][min_var_index], 
        "port-return": graph_data["port-return"][min_var_index], "port-std-dev": graph_data["port-std-dev"][min_var_index]
    }

    document.querySelector("#w1").innerHTML = min_risk_port["w1"]
    document.querySelector("#w2").innerHTML = min_risk_port["w2"]
    document.querySelector("#port-return").innerHTML = format(min_risk_port["port-return"])
    document.querySelector("#port-std-dev").innerHTML = format(min_risk_port["port-std-dev"])
}

function plot_graph() {
    // Risk-return graph
    let risk_return_values = []
    for (let i = 0; i < graph_data["port-return"].length; i++) {
        risk_return_values.push({"x": graph_data["port-std-dev"][i], "y": graph_data["port-return"][i]})
    }

    let min_risk_point = [{"x": min_risk_port["port-std-dev"], "y": min_risk_port["port-return"]},
    // Added an invisible point with x = 0 to start the x axis from the origin
    {"x": 0, "y": min_risk_port["port-return"]}]

    let min_risk_colors = ["rgba(0, 255, 0, 1)", "rgba(0, 0, 0, 0)"]

    // Reset graphs
    document.querySelector(".graphs").innerHTML = `<div class="risk-return-container">
        <canvas id="risk-return"></canvas>
    </div>
    
    <div class="weight-graph-container">
        <canvas id="return-weight"></canvas>
        <canvas id="variance-weight"></canvas>
    </div>`;


    // Risk-return graph
    let datasets = [{
        label: "Portfolio",
        type: "scatter",
        pointRadius: 4,
        pointBackgroundColor: "rgba(0, 0, 255, 1)",
        data: risk_return_values,
        order: 3,
        backgroundColor: "rgba(0, 0, 255, 1)"
    }, {
        label: "Min Var Point",
        type: "scatter",
        pointRadius: 4,
        pointBackgroundColor: min_risk_colors,
        data: min_risk_point,
        order: 1,
        backgroundColor: "rgba(0, 255, 0, 1)"
    }]

    // If Efficient Frontier is checked, Add it
    if (document.getElementById('eff-front').checked) {
        eff_front_values = []
        for (let i = 0; i < risk_return_values.length; i++) {
            if (risk_return_values[i]["y"] >= min_risk_point[0]["y"]) {
                eff_front_values.push({"x": risk_return_values[i]["x"], "y": risk_return_values[i]["y"]})
            }
        }

        datasets.push({
            label: "Efficient Frontier",
            type: "scatter",
            pointRadius: 4,
            pointBackgroundColor: "rgba(255, 255, 0, 1)",
            data: eff_front_values,
            order: 2,
            backgroundColor: "rgba(255, 255, 0, 1)"
        })
    }

    // If Outer Bounds are enabled, add them
    if (document.getElementById('bounds').checked) {
        outer_bound_values = []
        for (let i = 0; i < corr_1_data["port-return"].length; i++) {
            outer_bound_values.push({"x": corr_1_data["port-std-dev"][i], "y": corr_1_data["port-return"][i]})
        }

        for (let i = 0; i < corr_neg_1_data["port-return"].length; i++) {
            outer_bound_values.push({"x": corr_neg_1_data["port-std-dev"][i], "y": corr_neg_1_data["port-return"][i]})
        }

        console.log(corr_1_data)
        console.log(corr_neg_1_data)
        console.log(outer_bound_values)

        datasets.push({
            label: "Outer Bounds",
            type: "scatter",
            pointRadius: 4,
            pointBackgroundColor: "rgba(0, 0, 255, 0.3)",
            data: outer_bound_values,
            order: 4,
            backgroundColor: "rgba(0, 0, 255, 0.3)"
        })
    }

    // Make the graph
    new Chart("risk-return", {
        type: "scatter",
        data: {
            datasets: datasets
        }, options: {
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: "Return"
                    }
                }], 
                xAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: "Risk"
                    }
                }]
            }     
        }
    })

    // Return-weight graph
    let weight_name = asset_1["name"]

    new Chart("return-weight", {
        type: "line",
        data: {
            labels: graph_data["w1"],
            datasets: [{
                label: "Return",
                borderColor: "rgba(0, 0, 255, 1)",
                fill: false,
                data: graph_data["port-return"],
                backgroundColor: "rgba(0, 0, 255, 1)"
            }]
        }, options: {
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: "Return"
                    }
                }], 
                xAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: "Weight (" + weight_name + ")"
                    }
                }]
            }     
        }
    })

    // Variance-weight graph
    let variance_values = []
    for (let i = 0; i < graph_data["port-std-dev"].length; i++) {
        variance_values.push(graph_data["port-std-dev"][i] ** 2)
    }

    new Chart("variance-weight", {
        type: "line",
        data: {
            labels: graph_data["w1"],
            datasets: [{
                label: "Variance",
                borderColor: "rgba(0, 0, 255, 1)",
                fill: false,
                data: variance_values,
                backgroundColor: "rgba(0, 0, 255, 1)"
            }]
        }, options: {
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: "Variance"
                    }
                }], 
                xAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: "Weight (" + weight_name + ")"
                    }
                }]
            }     
        }
    })
}

function raise_correl() {
    if (current_correl + 0.05 <= 1) {
        current_correl += 0.05
    } else {
        current_correl = 1
    }

    calculate(reset=false)
}

function reduce_correl() {
    if (current_correl - 0.05 >= -1) {
        current_correl -= 0.05
    } else {
        current_correl = -1
    }

    calculate(reset=false)
}

function reset_correl() {
    current_correl = actual_correl

    calculate(reset=false)
}

function change_correl() {
    let correl = parseFloat(document.querySelector("#current-correl").value)

    if (correl >= 1) {
        current_correl = 1
    } else if (correl <= -1) {
        current_correl = -1
    } else {
        current_correl = correl
    }

    calculate(reset=false)
}

function populate_data_table() {
    document.querySelector("#asset-1-name").innerHTML = asset_1["name"]
    document.querySelector("#asset-2-name").innerHTML = asset_2["name"]

    for (let i = 1; i <= asset_1["data"].length; i++) {
        let table_row = document.createElement("tr")
        table_row.setAttribute("id", "row" + i)

        let time_period = document.createElement("td")
        time_period.innerHTML = i

        let asset_1_value = document.createElement("td")
        asset_1_value.innerHTML = asset_1["data"][i - 1]

        let asset_2_value = document.createElement("td")
        asset_2_value.innerHTML = asset_2["data"][i - 1]

        table_row.appendChild(time_period)
        table_row.appendChild(asset_1_value)
        table_row.appendChild(asset_2_value)

        document.getElementById("data-table").appendChild(table_row)
    }
}

function data_reveal() {
    let button = document.querySelector("#data-reveal")
    let table = document.getElementById("data-table")

    if (button.innerHTML == "Show Data") {
        table.hidden = false
        button.innerHTML = "Hide Data"
    } else {
        table.hidden = true
        button.innerHTML = "Show Data"
    }
}


// Variable data table length
function total_periods() {
    let new_data_enter_length = parseInt(document.querySelector('#total-periods').value)
    let diff = new_data_enter_length - current_data_enter_length
    let start = current_data_enter_length + 1

    if (diff > 0) {
        for (let i = start; i <= new_data_enter_length; i++) {
            let table_row = document.createElement("tr")
            table_row.setAttribute("id", "new-data-row" + i)

            let time_period = document.createElement("td")
            time_period.innerHTML = i

            let asset_1_value_cell = document.createElement("td")
            let asset_1_value = document.createElement("input")
            asset_1_value.setAttribute("type", "number")
            asset_1_value.setAttribute("id", "new-data-1-" + i)

            let asset_2_value_cell = document.createElement("td")
            let asset_2_value = document.createElement("input")
            asset_2_value.setAttribute("type", "number")
            asset_2_value.setAttribute("id", "new-data-2-" + i)

            asset_1_value_cell.appendChild(asset_1_value)
            asset_2_value_cell.appendChild(asset_2_value)
            table_row.appendChild(time_period)
            table_row.appendChild(asset_1_value_cell)
            table_row.appendChild(asset_2_value_cell)

            document.getElementById("new-data-table").appendChild(table_row)
        }

        current_data_enter_length = new_data_enter_length

    } else if (diff < 0) {
        if (new_data_enter_length < 1) {
            return
        }

        for (let i = current_data_enter_length; i > new_data_enter_length; i--) {
            document.getElementById('new-data-row' + i).remove()
        }

        current_data_enter_length = new_data_enter_length
    } else {
        return
    }
}

function submit_data() {
    asset_1["name"] = document.querySelector("#new-asset-1-name").value
    asset_2["name"] = document.querySelector("#new-asset-2-name").value
    asset_1["data"] = []
    asset_2["data"] = []

    for (let i = 0; i < current_data_enter_length; i++) {
        asset_1["data"][i] = parseInt(document.querySelector("#new-data-1-" + (i + 1)).value)
        asset_2["data"][i] = parseInt(document.querySelector("#new-data-2-" + (i + 1)).value)
        document.getElementById('new-data-row' + (i + 1)).remove()
    }

    for (let i = 1; i <= current_data_length; i++) {
        document.getElementById("row" + i).remove()
    }

    current_data_length = current_data_enter_length
    current_data_enter_length = 0

    display_screen('graph-screen')
    calculate()
}


// General functions

function display_screen(screen) {
	let screens = ["graph-screen", "data-screen"]
	
	for (let i = 0; i < screens.length; i++) {
		if (screens[i] == screen) {
			document.querySelector("." + screens[i]).hidden = false;
		} else {
			document.querySelector("." + screens[i]).hidden = true;
		}
	}
}

function format(text) {
    return text.toLocaleString("en-US", {maximumFractionDigits: DEFAULT_ROUNDING_PLACES})
}

window.addEventListener("load", calculate)